[
["index.html", "UMass PBS Instructors R Manual Chapter 1 Preface 1.1 Getting Started 1.2 Formatting Conventions 1.3 Reproducibility", " UMass PBS Instructors R Manual Will Hopper Andrea Cataldo Jun 4, 2019 Chapter 1 Preface This book serves as a guide for instructors teaching statistics and research methods with R in the UMass Amherst Psychological &amp; Brain Sciences Department. The book is organized into three main sections: An introduction to the R language and the Rstudio development environment. A reference for performing and interpreting common statistical tests in R. Recommended Best practices for instructors. Section 1 is primarily intended for instructors who are unfamiliar with the R language and it’s ecosystem. However, we recommended even experienced R users read it, as it is useful to remind yourself of the perspective the majority of your students will be approaching R from, and to get “on the same page” as your fellow instructors. 1.1 Getting Started To follow along with the examples in this book, it is recommended that you install the latest version of R and RStudio to your personal computer. 1.1.1 The R Language R is a complete programming language and computing environment designed to enable statistical modeling, data manipulation, and reporting. Despite its focus on statistics, it is still very feature rich - we can use it to perform mathematical calculations, create data visualizations, connect to remote databases, save results as files on your computers hard drive, and more. In fact, this entire manual was created in R! To get started, download and install the most current version of R for your operating system: Windows: https://cran.r-project.org/bin/windows/base/ Mac OS X: https://cran.r-project.org/bin/macosx/ Linux: https://cran.r-project.org/bin/Linux/ (as always, see instructions for your specific Linux distribution) 1.1.2 RStudio RStudio is a graphical program that simplifies common R related tasks, organizes information about your current R session, and generally makes it easier to use R. This type of program is called an Integrated Development Environment, or IDE for short. We strongly recommend using R within RStudio. However, it is important to understand that they are separate and distinct programs, and R can freely be used outside of RStudio. To help your students understand their relationship, you could offer the following analogy: RStudio is like a workbench and toolbox, where R is like a hammer. You do not need a workbench and toolbox to build something with your hammer - but having a workbench to rest your project on while you work, and a toolbox where all your nails are organized is very convenient, and will probably help you do your work faster and more accurately. The company which produces the RStudio software has several different products with “RStudio” in the name. You and your students will want to install the “RStudio Desktop - Open Source License” version (i.e., the free version): RStudio Desktop for Windows: http://rstudio.org/download/latest/stable/desktop/windows/RStudio-latest.exe RStudio Desktop for Mac OS X: http://rstudio.org/download/latest/stable/desktop/mac/RStudio-latest.dmg RStudio Desktop for Linux: Get .deb and .rpm packages here 1.2 Formatting Conventions R source code (i.e. code run in the R console or from an R script) and output are presented in monospace font in regions with a light gray background. We do not include command line prompts (&gt; and +, like you would see in a real R console) to the R source code. This is to allow you to conveniently copy and run the code without having to delete the leading prompt symbols. All text output from executing R commands is denoted with two preceeding hashes (##). So, any time you see ## following a block of R code, you are looking at the output of the preeceeding command. 1.3 Reproducibility The R session information when compiling this book is shown below: sessionInfo() ## R version 3.5.1 (2018-07-02) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 7 x64 (build 7601) Service Pack 1 ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=English_United States.1252 ## [2] LC_CTYPE=English_United States.1252 ## [3] LC_MONETARY=English_United States.1252 ## [4] LC_NUMERIC=C ## [5] LC_TIME=English_United States.1252 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] compiler_3.5.1 magrittr_1.5 bookdown_0.11 htmltools_0.3.6 ## [5] tools_3.5.1 yaml_2.2.0 Rcpp_1.0.1 stringi_1.4.3 ## [9] rmarkdown_1.13 knitr_1.22 stringr_1.3.1 xfun_0.6 ## [13] digest_0.6.19 packrat_0.4.9-3 evaluate_0.14 "],
["introducing-r-and-rstudio.html", "Chapter 2 Introducing R and RStudio 2.1 Pane #1: The R Console 2.2 Pane #2: The Editor 2.3 Pane #3", " Chapter 2 Introducing R and RStudio 2.1 Pane #1: The R Console The R console allows you to execute R code (often called expressions, or commands) and see the results printed out. To execute R commands, place your cursor at the prompt (the &gt; symbol), type in your code, and press Enter. A simple and easy way to demonstrate using R console is to perform some basic arithmetic, just like a calculator. R has 5 basic arithmetic operators: + for addition - for subtraction * for multiplication / for division ^ for exponentiation 2 + 2 ## [1] 4 R respects the order of operations (i.e. PEMDAS) by default, so if you want to for a specific operation to be executed fist, you need to surround it with parenthesis. To see how grouping with parenthesis affects arithmetic operations, compare the following two examples: 2*10 + 3/10 ## [1] 20.3 2*(10 + 3)/10 ## [1] 2.6 The R console is the best place to start immersing yourself in the language by experimentation. It allows you to “code as you go”; run one command, see what you get, adjust it and test it again. However, the interactive nature of using the R console makes it a poor choice for saving your work to use again later, and for complicated, multi-step operations. When you know you need to repeat the same step again in the future (i.e. re-use code), or you have a task that requires intermediate steps, you should organize all your code into an R script. RStudio allows you to easily write and interactively test out your R scripts in the Editor Pane, which is introduced below. 2.2 Pane #2: The Editor The editor pane is where you can create, modify, and save plain text documents, and is designed to help you create and execute R scripts. An R script is just a text file that contains valid R code (the same kind of commands you would enter into the console), and commonly carries the .R file extension. You can think of an R script like a stand-alone computer program, but instead of double-clicking to run it, you run it via the R interpreter. You can create a new, blank R script by going to the File Menu ➡ New File ➡ R Script. Rstudio provides several methods for executing the code you’ve written. You can: Run a single line of code by placing your cursor on that line and pressing Ctrl + Enter (⌘ Command + Enter on Mac). Run multiple lines of code by selecting all the lines your want to run with your cursor and pressing Ctrl + Enter (⌘ Command + Enter on Mac). Run the entire R script by pressing the “Source” button in the top-right corner of the editor pane, or using the Ctrl + Shift + S keyboard shortcut (⌘ Command + Shift + S on Mac) No matter which method you use, the code you choose to run will be executed in the R console below, and you will see any results printed out there as well. Another reason to write your code in an R script is to keep a short explanation of what you are doing (and why!) together with your code. These short explanations are called comments In R, you write a comment by prefixing the comment’s text with the pound sign #. Comments can go on their own line, or at the end of an R expression. # Hi I am a comment. # The R interprer ignores me! 2*10 + 3/10 # comments can go here too! ## [1] 20.3 2.3 Pane #3 2.3.1 Variables and the Environment As your R scripts grow beyond adding and subtracting a few numbers, you will often want to save the results of your computations (like datasets, or the results of statistical models) to use multiple times, or to increase the clarity of your code. In R, you can save a value for later use by assigning it to a variable name. You can create a new variable using the assignment operator &lt;-, using the syntax name &lt;- value where name is a syntactically valid name, and value is the value you wish to assign. To demonstrate creating a variable, consider the code below, where I create a variable named x, assign it a value of 1, and then print out its value by typing x into the console and pressing enter. x &lt;- 1 x ## [1] 1 If you execute the first command x &lt;- 1 in your own console, you should see it appear in the “Environment” pane of the RStudio window. The environment pane is helpful for keeping track of all the variables you’ve created. If you ever want to clear your Environment (i.e., delete all the variables you’ve created), you can press the button. Variable names are mostly arbitrary (we could have used elephant or jumpluff instead of x), but there are some restrictions on variable names, the most important being: Spaces are not allowed The name cannot begin with a number. See the “Details” section of the make.names help page, and the list of reserved keywords for a complete set of naming rules. 2.3.2 History "]
]
